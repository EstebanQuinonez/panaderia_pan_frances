package forms;

import clases.Inventario;
import clases.ManejoFileInventario;
import java.io.*;
import javax.swing.JFileChooser;


public class GestionCanasta extends javax.swing.JFrame {

    /**
     * Creates new form GestionCanasta
     */
     Inventario canastaPedida;
     Inventario invProductos;
    public GestionCanasta() {
        initComponents();
        setResizable(false);
        setTitle("GESTION DEL PEDIDO DEL CLIENTE");
        canastaPedida = new Inventario("CANASTA");
        invProductos = new Inventario("PRODUCTOS");
        btnRegresarEstante.setEnabled(false);
        btnAñadirCanasta.setEnabled(false);
        txtIDp.setEditable(false);
        btnGuardarCambios.setEnabled(false);
        btnEstante.setEnabled(false);
        txtCanastaG.setEditable(false);
        txtEstante.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtCanastaG = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        txtIDp = new javax.swing.JTextField();
        btnRegresarEstante = new javax.swing.JButton();
        btnAñadirCanasta = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtEstante = new javax.swing.JTextArea();
        btnBuscarPedido = new javax.swing.JButton();
        btnEstante = new javax.swing.JButton();
        btnGuardarCambios = new javax.swing.JButton();
        txtDniCliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnCerrarVentana = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtCanastaG.setEditable(false);
        txtCanastaG.setColumns(20);
        txtCanastaG.setRows(5);
        jScrollPane1.setViewportView(txtCanastaG);

        jLabel1.setText("ID PRODUCTO");

        btnRegresarEstante.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/flecha-correcta.png"));
        btnRegresarEstante.setText("REGRESAR AL ESTANTE");
        btnRegresarEstante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarEstanteActionPerformed(evt);
            }
        });

        btnAñadirCanasta.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/flecha-izquierda.png"));
        btnAñadirCanasta.setText("AÑADIR AL CARRITO");
        btnAñadirCanasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirCanastaActionPerformed(evt);
            }
        });

        txtEstante.setEditable(false);
        txtEstante.setColumns(20);
        txtEstante.setRows(5);
        jScrollPane2.setViewportView(txtEstante);

        btnBuscarPedido.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/buscarpedido.png"));
        btnBuscarPedido.setText("BUSCAR PEDIDO");
        btnBuscarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPedidoActionPerformed(evt);
            }
        });

        btnEstante.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/mostrar.png"));
        btnEstante.setText("ESTANTE DE PRODUCTOS");
        btnEstante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEstanteActionPerformed(evt);
            }
        });

        btnGuardarCambios.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/save.png"));
        btnGuardarCambios.setText("GUARDAR CAMBIOS DE PEDIDO");
        btnGuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarCambiosActionPerformed(evt);
            }
        });

        txtDniCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDniClienteActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/cliente.png"));
        jLabel2.setText("CLIENTE : ");

        btnCerrarVentana.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/exit.png"));
        btnCerrarVentana.setText("CERRAR VENTANA");
        btnCerrarVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarVentanaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/bienes.png"));
        jLabel3.setText("CARRITO DE PRODUCTOS");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/productos.png"));
        jLabel4.setText("ESTANTE DE PRODUCTOS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnBuscarPedido)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(txtIDp, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnAñadirCanasta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(btnRegresarEstante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(184, 184, 184)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnGuardarCambios)
                                            .addComponent(btnEstante, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnCerrarVentana, javax.swing.GroupLayout.Alignment.LEADING)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtIDp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnRegresarEstante, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnAñadirCanasta))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarPedido)
                    .addComponent(btnEstante))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDniCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnGuardarCambios)
                        .addGap(18, 18, 18)
                        .addComponent(btnCerrarVentana)
                        .addGap(18, 18, 18))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPedidoActionPerformed
        // TODO add your handling code here:

        String nombreArchivoGuardado ="";
        //Un objeto JFileChooser que muestra un cuadro de diálogo para seleccionar archivos
        JFileChooser fileChooser = new JFileChooser();
        //La ruta del directorio actual
        String currentDir = System.getProperty("user.dir");
         // Establece el directorio actual como directorio de inicio del JFileChooser
        fileChooser.setCurrentDirectory(new File(currentDir));
        // Muestra el cuadro de diálogo para seleccionar el archivo
        int result = fileChooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            // Obtiene el archivo seleccionado
            File selectedFile = fileChooser.getSelectedFile();
            // Crea un objeto File a partir de la ruta absoluta del archivo seleccionado
            File archivoGuardado = new File(selectedFile.getAbsolutePath());
             // Obtiene el nombre del archivo seleccionado
            nombreArchivoGuardado = archivoGuardado.getName();
            // Lee el inventario desde el archivo seleccionado
            canastaPedida = ManejoFileInventario.leerInventarioDesdeArchivo(nombreArchivoGuardado, canastaPedida);
            // Actualiza el contenido del cuadro de texto
            txtCanastaG.setText(canastaPedida.getRegistroProductos().toString());
             // Imprime un mensaje de éxito en la consola
            System.out.println("lectura exitosa");
        }

            txtDniCliente.setText(nombreArchivoGuardado);
            txtDniCliente.setEditable(false);
            btnEstante.setEnabled(true);
        
        
    }//GEN-LAST:event_btnBuscarPedidoActionPerformed

    private void btnEstanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEstanteActionPerformed
        // TODO add your handling code here:
       
        /**
         * El siguiente método crea un objeto File a partir de la ruta del archivo de 
         * inventario, verifica si existe, y si existe, lee el inventario desde el 
         * archivo y actualiza el contenido del cuadro de texto
         * Si el archivo no existe, muestra un mensaje en el cuadro de texto indicando que no hay 
         * productos registrados
         * También realiza algunas configuraciones de los elementos de la interfaz gráfica.
         */
        
        //Un objeto File que representa el archivo de inventario
        File archivo = new File(invProductos.getTipoInventario());
        
        
        if(archivo.exists()){
        // Si el archivo existe, lee el inventario desde el archivo y actualiza el contenido del cuadro de texto
            invProductos = ManejoFileInventario.leerInventarioDesdeArchivo(invProductos.getTipoInventario(), invProductos);
            txtEstante.setText(invProductos.getRegistroProductos().toString());
        }
        else{
            // Si el archivo no existe, muestra un mensaje indicando que no hay productos registrados
            txtEstante.setText("NO EXISTE UNA LISTA DE PRODUCTOS REGISTRADOS PARA MOSTRAR");
        }
        
        // Configura algunos elementos de la interfaz gráfica
        btnEstante.setEnabled(false);
        btnRegresarEstante.setEnabled(true);
        btnAñadirCanasta.setEnabled(true);
        txtIDp.setEditable(true);
        btnBuscarPedido.setEnabled(false);
        btnGuardarCambios.setEnabled(true);
        
        
        
    }//GEN-LAST:event_btnEstanteActionPerformed

    private void btnRegresarEstanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarEstanteActionPerformed
        // TODO add your handling code here:

        /**
         * El siguiente método toma un número de identificación de producto ingresado por el 
         * usuario y verifica si solo contiene números Si es así, convierte el número en un 
         * entero y agrega el producto correspondiente de regreso al estante de productos Luego actualiza 
         * el contenido de dos los cuadros de texto que muestran el inventario y la canasta de 
         * compra 
         * Si el número de identificación no contiene solo números, se agrega un 
         * producto con ID 0 a la canasta de compra.
         */
        int itemI;
        String item = txtIDp.getText();
         // Verifica si el número de identificación contiene solo números
        boolean contieneSoloNumeros = item.matches("[0-9]+");
         
        if(contieneSoloNumeros){
         // Si el número de identificación contiene solo números, convierte el número en un entero y agrega el producto correspondiente de regreso al estante de productos       
            itemI = Integer.parseInt(item);
            canastaPedida.creandoCarritoCompra(itemI, invProductos);
 // Actualiza el contenido de dos cuadros de texto que muestran el inventario y la canasta de compra
            txtEstante.setText( invProductos.getRegistroProductos().toString());
            txtCanastaG.setText(canastaPedida.getRegistroProductos().toString());
   // Borra el contenido del cuadro de texto del número de identificación      
            txtIDp.setText("");
            
        }else{
 // Si el número de identificación no contiene solo números, agrega un producto con ID 0 de vuelta al estante y luego actualiza los cuadros de texto como antes.           
  // no aparecerá nada anomalo debido a que no existirá un producto con identificador 0 u otro dato invalido. 
            itemI = 0;
            canastaPedida.creandoCarritoCompra(itemI, invProductos);
            txtEstante.setText( invProductos.getRegistroProductos().toString());
            txtCanastaG.setText(canastaPedida.getRegistroProductos().toString());
  // Borra el contenido del cuadro de texto del número de identificación             
            txtIDp.setText("");
        }
       
    }//GEN-LAST:event_btnRegresarEstanteActionPerformed

    private void btnAñadirCanastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirCanastaActionPerformed
        // TODO add your handling code here:
        /**
         * El siguiente método toma un número de identificación de producto ingresado por el 
         * usuario y verifica si solo contiene números Si es así, convierte el número en un 
         * entero y agrega el producto correspondiente al carrito de compra Luego actualiza 
         * el contenido de dos los cuadros de texto que muestran el inventario y la canasta de 
         * compra Si el número de identificación no contiene solo números, se agrega un 
         * producto con ID 0 a la canasta de compra.
         */
        int itemI;
        String item = txtIDp.getText();
            // Verifica si el número de identificación contiene solo números
        boolean contieneSoloNumeros = item.matches("[0-9]+");
        
        
        if(contieneSoloNumeros){
   // Si el número de identificación contiene solo números, convierte el número en un entero y agrega el producto correspondiente al carrito de compras        
            itemI = Integer.parseInt(item);
            invProductos.creandoCarritoCompra(itemI, canastaPedida);
    // Actualiza el contenido de dos cuadros de texto que muestran el inventario y la canasta de compra    
            txtEstante.setText( invProductos.getRegistroProductos().toString());
            txtCanastaG.setText(canastaPedida.getRegistroProductos().toString());
        
            txtIDp.setText("");
        
        }else{
 // Si el número de identificación no contiene solo números, agrega un producto con ID 0 al carrito de compras y luego actualiza los cuadros de texto como antes.           
  // no aparecerá nada anomalo debido a que no existirá un producto con identificador 0 u otro dato invalido.            
            itemI =0;
            invProductos.creandoCarritoCompra(itemI, canastaPedida);

            txtEstante.setText( invProductos.getRegistroProductos().toString());
            txtCanastaG.setText(canastaPedida.getRegistroProductos().toString());
   // Borra el contenido del cuadro de texto del número de identificación         
            txtIDp.setText("");
        }

    }//GEN-LAST:event_btnAñadirCanastaActionPerformed

    private void btnGuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarCambiosActionPerformed
        /**
        * Escribe la información de las canastas y del inventario en archivos y deshabilita y
        * limpia algunos componentes de la interfaz gráfica.
        * @param canastaPedida La canasta actual.
        * @param invProductos El inventario actual.
        * @param txtDniCliente El campo de texto donde se ingresó el nombre del archivo para guardar.
        * @param txtEstante El campo de texto donde se muestra el inventario.
        * @param txtCanastaG El campo de texto donde se muestra la canasta
        * @param btnBuscarPedido El botón para buscar un pedido.
        * @param btnRegresarEstante El botón para regresar al estante.
        * @param btnAñadirCanasta El botón para añadir productos a la canasta.
        * @param txtIDp El campo de texto donde se ingresa el ID del producto a añadir a la canasta.
        * @param btnGuardarCambios El botón para guardar los cambios en la canasta.
        * @param btnEstante El botón para mostrar el inventario.
        */
        
        String archt = txtDniCliente.getText();
        
        ManejoFileInventario.escribirInventarioEnArchivo(archt, canastaPedida);
        ManejoFileInventario.escribirInventarioEnArchivo(invProductos.getTipoInventario(), invProductos);
        
        btnRegresarEstante.setEnabled(false);
        btnAñadirCanasta.setEnabled(false);
        txtIDp.setEditable(false);
        btnGuardarCambios.setEnabled(false);
        btnEstante.setEnabled(false);   
        txtDniCliente.setText("");
        txtEstante.setText("");
        txtCanastaG.setText("");
        btnBuscarPedido.setEnabled(true);
     
     
        
    }//GEN-LAST:event_btnGuardarCambiosActionPerformed

    private void txtDniClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDniClienteActionPerformed
        // TODO add your handling code here:   
    }//GEN-LAST:event_txtDniClienteActionPerformed

    private void btnCerrarVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarVentanaActionPerformed
        // TODO add your handling code here:
         this.setVisible(false);
    }//GEN-LAST:event_btnCerrarVentanaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionCanasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionCanasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionCanasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionCanasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GestionCanasta().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadirCanasta;
    private javax.swing.JButton btnBuscarPedido;
    private javax.swing.JButton btnCerrarVentana;
    private javax.swing.JButton btnEstante;
    private javax.swing.JButton btnGuardarCambios;
    private javax.swing.JButton btnRegresarEstante;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtCanastaG;
    private javax.swing.JTextField txtDniCliente;
    private javax.swing.JTextArea txtEstante;
    private javax.swing.JTextField txtIDp;
    // End of variables declaration//GEN-END:variables
}
