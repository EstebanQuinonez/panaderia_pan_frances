package forms;

import clases.Inventario;
import clases.ManejoFileInventario;
import java.io.*;

public class EliminarProd extends javax.swing.JFrame {

    /**
     * Creates new form EliminarProd
     */
    public EliminarProd() {
        initComponents();
        setResizable(false);
        setTitle("ELIMINAR PRODUCTO");
        txtListaProductos.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtListaProductos = new javax.swing.JTextArea();
        btnActualizarLista = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtIdproducto = new javax.swing.JTextField();
        btnEliminarProducto = new javax.swing.JButton();
        btnCerrarVentana = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtListaProductos.setEditable(false);
        txtListaProductos.setColumns(20);
        txtListaProductos.setRows(5);
        jScrollPane1.setViewportView(txtListaProductos);

        btnActualizarLista.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/refresh.png"));
        btnActualizarLista.setText("Actualizar Lista");
        btnActualizarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarListaActionPerformed(evt);
            }
        });

        jLabel1.setText("Id PRODUCTO: ");

        txtIdproducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdproductoActionPerformed(evt);
            }
        });

        btnEliminarProducto.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/borrar.png"));
        btnEliminarProducto.setText("ELIMINAR PRODUCTO");
        btnEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProductoActionPerformed(evt);
            }
        });

        btnCerrarVentana.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/exit.png"));
        btnCerrarVentana.setText("CERRAR VENTANA");
        btnCerrarVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarVentanaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnActualizarLista))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtIdproducto, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(btnEliminarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(btnCerrarVentana, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(btnActualizarLista))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdproducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarProducto)
                    .addComponent(btnCerrarVentana))
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnActualizarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarListaActionPerformed
         /**
         * Este metodo crea un objeto de la clase Inventario y un archivo asociado a él
         * Si el archivo existe, se lee el contenido del inventario desde el archivo y se muestra 
         * en un componente de interfaz de usuario de tipo JTextArea
         * Si el archivo no existe, se muestra un mensaje indicando que no hay registros de productos para mostrar.
         * En resumen se  carga la lista de productos desde un archivo si existe,
         * y muestra un mensaje si no hay registros de productos para mostrar.
         * @param invProductos objeto de la clase Inventario que representa el inventario de productos
         * @param archivo objeto File que representa el archivo correspondiente al inventario de productos
         * @param txtListaProductos objeto JTextArea que representa la ventana de texto donde se mostrará la lista de productos
         */    


        // Crea un nuevo inventario de productos con nombre "PRODUCTOS"
        Inventario  invProductos = new Inventario("PRODUCTOS");
        // Crea un objeto File con el nombre del archivo correspondiente al inventario de productos
        File archivo = new File(invProductos.getTipoInventario());
        
        // Si el archivo existe, lee el inventario de productos desde el archivo y muestra la lista de productos en la ventana de texto
        if(archivo.exists()){
            //lectura
            invProductos = ManejoFileInventario.leerInventarioDesdeArchivo(invProductos.getTipoInventario(), invProductos);
            txtListaProductos.setText(invProductos.getRegistroProductos().toString());
        }
        else{ // Si el archivo no existe, muestra un mensaje indicando que no hay productos registrados
            txtListaProductos.setText("NO EXISTE LISTA DE PRODUCTOS REGISTRADOS PARA MOSTRAR");
        }
      
    }//GEN-LAST:event_btnActualizarListaActionPerformed

    private void btnEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProductoActionPerformed
        /**
            * Elimina un elemento del inventario de productos.
            * @param invProductos objeto de tipo Inventario que contiene la información de los productos registrados.
            * @param archivo archivo que contiene la información del inventario de productos.
            * @param idproducto el identificador del producto a eliminar.
            * @param contieneSoloNumeros booleano que indica si el identificador del producto contiene sólo números.
            * @param id el identificador del producto a eliminar en formato entero.
            * Si el identificador del producto ingresado contiene sólo números, se convierte a entero y se busca en el inventario de productos
            * para eliminarlo. Si se encuentra, se actualiza la información del inventario en el archivo correspondiente y se limpian los campos
            * de texto relacionados con el identificador del producto. En caso contrario, se muestra un mensaje de error y se limpian los campos.
            * Si el archivo correspondiente al inventario de productos no existe, se muestra un mensaje indicando que no hay productos registrados.
        */
       
        
        // Creamos una instancia de la clase Inventario con el tipo "PRODUCTOS"
        Inventario invProductos = new Inventario("PRODUCTOS");
        // Creamos un objeto File con el tipo de inventario de la instancia creada anteriormente
        File archivo = new File(invProductos.getTipoInventario());
        
        // Obtenemos el texto del campo "txtIdproducto" y verificamos si contiene solo números validos
        String idproducto = txtIdproducto.getText();
        boolean contieneSoloNumeros = txtIdproducto.getText().matches("[0-9]+");

       
        
        // Si el campo "txtIdproducto" contiene solo números, eliminamos el elemento correspondiente del inventario
        if(contieneSoloNumeros){
            // Convertimos el id del producto a entero
            int id = Integer.parseInt(idproducto);
            
            if(archivo.exists()){ // Si el archivo de inventario existe, leemos los datos del inventario desde el archivo
                invProductos = ManejoFileInventario.leerInventarioDesdeArchivo(invProductos.getTipoInventario(), invProductos);
                // Eliminamos el elemento correspondiente del inventario
                invProductos.eliminarElemento(id);
                // Escribimos los datos del inventario actualizado en el archivo de inventario
                ManejoFileInventario.escribirInventarioEnArchivo(invProductos.getTipoInventario(), invProductos);
                 // Limpiamos los campos de texto
                txtIdproducto.setText("");
                jLabel2.setText("");
            }else{ // Si el archivo de inventario no existe, mostramos un mensaje de error
                txtListaProductos.setText("NO EXISTE LISTA DE PRODUCTOS REGISTRADOS PARA MOSTRAR");
                txtIdproducto.setText("");
                jLabel2.setText("");
            }

        }else{// Si el campo "txtIdproducto" no contiene solo números, mostramos un mensaje de error
            jLabel2.setText("Ingrese número invalido");
            txtIdproducto.setText("");
        } 

    }//GEN-LAST:event_btnEliminarProductoActionPerformed

    private void btnCerrarVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarVentanaActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_btnCerrarVentanaActionPerformed

    private void txtIdproductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdproductoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdproductoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EliminarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EliminarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EliminarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EliminarProd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new EliminarProd().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarLista;
    private javax.swing.JButton btnCerrarVentana;
    private javax.swing.JButton btnEliminarProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtIdproducto;
    private javax.swing.JTextArea txtListaProductos;
    // End of variables declaration//GEN-END:variables
}
