package forms;

import clases.Inventario;
import clases.ManejoFileInventario;
import java.io.*;


public class Canasta extends javax.swing.JFrame {

    /**
     * Creates new form Canasta
     */
    Inventario invProductos;
    Inventario canastaProductos;
    public Canasta() {
        
        initComponents();
        setResizable(false);
        setTitle("CREAR CANASTA DE CLIENTE");
        invProductos = new Inventario("PRODUCTOS");
        canastaProductos = new Inventario("CANASTA");
        
        txtDniCanasta.setEditable(false);
        btnAñadirCarrito.setEnabled(false);
        btnRegresarEstante.setEnabled(false);
        btnGenerarCanasta.setEnabled(false);
        txtIDprod.setEditable(false);
        txtProductos.setEditable(false);
        txtCanasta.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtProductos = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCanasta = new javax.swing.JTextArea();
        btnAñadirCarrito = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtIDprod = new javax.swing.JTextField();
        btnProductosDisponibles = new javax.swing.JButton();
        btnCerrarVentana = new javax.swing.JButton();
        btnGenerarCanasta = new javax.swing.JButton();
        btnRegresarEstante = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtDniCanasta = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblTituloEstante = new javax.swing.JLabel();
        lblTituloCarrito = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtProductos.setEditable(false);
        txtProductos.setColumns(20);
        txtProductos.setRows(5);
        jScrollPane1.setViewportView(txtProductos);

        txtCanasta.setEditable(false);
        txtCanasta.setColumns(20);
        txtCanasta.setRows(5);
        jScrollPane2.setViewportView(txtCanasta);

        btnAñadirCarrito.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/flecha-correcta.png"));
        btnAñadirCarrito.setText("AÑADIR AL CARRITO");
        btnAñadirCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirCarritoActionPerformed(evt);
            }
        });

        jLabel1.setText("ID PRODUCTO");

        txtIDprod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDprodActionPerformed(evt);
            }
        });

        btnProductosDisponibles.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/mostrar.png"));
        btnProductosDisponibles.setText("PRODUCTOS DISPONIBLES");
        btnProductosDisponibles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductosDisponiblesActionPerformed(evt);
            }
        });

        btnCerrarVentana.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/exit.png"));
        btnCerrarVentana.setText("CERRAR VENTANA");
        btnCerrarVentana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarVentanaActionPerformed(evt);
            }
        });

        btnGenerarCanasta.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/hacer-un-pedido.png"));
        btnGenerarCanasta.setText("GENERAR CANASTA");
        btnGenerarCanasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarCanastaActionPerformed(evt);
            }
        });

        btnRegresarEstante.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/flecha-izquierda.png"));
        btnRegresarEstante.setText("REGRESAR AL ESTANTE");
        btnRegresarEstante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarEstanteActionPerformed(evt);
            }
        });

        jLabel2.setText("DNI  CLIENTE: ");

        txtDniCanasta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDniCanastaActionPerformed(evt);
            }
        });

        lblTituloEstante.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTituloEstante.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/productos.png"));
        lblTituloEstante.setText("ESTANTE DE PRODUCTOS");

        lblTituloCarrito.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTituloCarrito.setIcon(new javax.swing.ImageIcon("src/main/java/recursos/bienes.png"));
        lblTituloCarrito.setText("CARRITO DE COMPRAS");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTituloEstante, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTituloCarrito, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(180, 180, 180))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(btnProductosDisponibles, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtDniCanasta, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnGenerarCanasta, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(250, 586, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCerrarVentana))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(txtIDprod, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel1))
                                            .addGap(40, 40, 40))
                                        .addComponent(btnRegresarEstante, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addComponent(btnAñadirCarrito, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(13, 13, 13))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTituloCarrito, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTituloEstante, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtIDprod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnAñadirCarrito)
                        .addGap(18, 18, 18)
                        .addComponent(btnRegresarEstante)
                        .addGap(59, 59, 59))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGenerarCanasta)
                    .addComponent(jLabel2)
                    .addComponent(txtDniCanasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProductosDisponibles))
                .addGap(28, 28, 28)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCerrarVentana)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtIDprodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDprodActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIDprodActionPerformed

    private void btnProductosDisponiblesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductosDisponiblesActionPerformed
        
        /**
         * Crea un objeto File con la ruta del archivo de inventario
         * Si el archivo existe, lee los datos de inventario y los muestra en el campo de texto
         * Si el archivo no existe, muestra un mensaje de error en el campo de texto
         * Deshabilita el botón de productos disponibles y habilita los campos y botones necesarios para continuar con el proceso.
         * @param invProductos El inventario de productos.
         * @param txtProductos El campo de texto donde se muestran los datos de inventario.
         * @param btnProductosDisponibles El botón de productos disponibles.
         * @param txtIDprod El campo de texto para ingresar el ID del producto.
         * @param btnAñadirCarrito El botón para añadir productos al carrito.
         * @param btnRegresarEstante El botón para regresar los productos al estante.
         * @param btnGenerarCanasta El botón para generar una canasta de productos.
         * @param txtDniCanasta El campo de texto para ingresar el DNI del cliente de la canasta.
        */
        
        // Crea un objeto File con la ruta del archivo de inventario
        File archivo = new File(invProductos.getTipoInventario());
        
        // Si el archivo existe, lee los datos de inventario y los muestra en el campo de texto
        if(archivo.exists()){
            
            // Lee los datos de inventario desde el archivo
            invProductos = ManejoFileInventario.leerInventarioDesdeArchivo(invProductos.getTipoInventario(), invProductos);
            // Muestra los datos de inventario en el campo de texto de productos
            txtProductos.setText(invProductos.getRegistroProductos().toString());
        }
        else{
             // Si el archivo no existe, muestra un mensaje de error en el campo de texto de productos
            txtProductos.setText("NO EXISTE UNA LISTA DE PRODUCTOS REGISTRADOS PARA MOSTRAR");
        }
        /*Deshabilita el botón de productos disponibles y habilita 
        los campos y botones necesarios para continuar con el proceso*/
            btnProductosDisponibles.setEnabled(false);
            txtIDprod.setEditable(true);
            btnAñadirCarrito.setEnabled(true);
            btnRegresarEstante.setEnabled(true);
            btnGenerarCanasta.setEnabled(true);
            txtDniCanasta.setEditable(true);
         
    }//GEN-LAST:event_btnProductosDisponiblesActionPerformed

    private void btnAñadirCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirCarritoActionPerformed
        /**

         * Actualiza el carrito de productos con el elemento indicado por el usuario
         * El elemento que se agrega al carrito de compras se obtiene a partir del campo de texto "txtIDprod"
         * Si el elemento es un número válido, se agrega a la canasta y se actualiza la
         * información de la lista de productos y la canasta en los campos de texto correspondientes
         * Si el elemento no es un número válido, se limpian el campo de texto para ingresar un dato valido.
         * @param txtIDprod El campo de texto donde se ingresa el ID del producto.
         * @param txtCanasta El campo de texto donde se muestra la información de la canasta de productos.
         * @param txtProductos El campo de texto donde se muestra la información de los productos.
         * @param invProductos El inventario de productos.
         * @param canastaProductos La canasta de productos que se está creando.
         */
        int itemI; // el ítem como un número entero
        String item = txtIDprod.getText(); // el ítem como una cadena de caracteres
        boolean contieneSoloNumeros = item.matches("[0-9]+"); // indica si la cadena contiene sólo números
        txtCanasta.setText(""); // limpia el campo de texto de la canasta

        if (contieneSoloNumeros) {
            itemI = Integer.parseInt(item); // convierte la cadena en un número entero
            invProductos.creandoCarritoCompra(itemI, canastaProductos); // agrega el ítem al carrito de compra creado

            // Actualiza la información de los productos y la canasta en los campos de texto correspondientes
            txtProductos.setText(invProductos.getRegistroProductos().toString());
            txtCanasta.setText(canastaProductos.getRegistroProductos().toString());

            txtIDprod.setText(""); // limpia el campo de texto del ítem
        } else {
            itemI = 0; // asigna el valor 0 al ítem como número entero

            // Actualiza la información de los productos y la del carrito en los campos de texto correspondientes
            // no aparecerá nada debido a que no existirá un producto con identificador 0  u otro dato invalido.
            invProductos.creandoCarritoCompra(itemI, canastaProductos);
            txtProductos.setText(invProductos.getRegistroProductos().toString());
            txtCanasta.setText(canastaProductos.getRegistroProductos().toString());

            txtIDprod.setText(""); // limpia el campo de texto del ítem
        } 
        
    }//GEN-LAST:event_btnAñadirCarritoActionPerformed

    private void btnRegresarEstanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarEstanteActionPerformed
        /**
        * Regresa un elemento al estante de productos y actualiza la información en los campos de texto correspondientes
        * El elemento se obtiene a partir del campo de texto "txtIDprod"
        * Si el elemento es un número válido, se agrega al estante de productos y se actualiza la información de la lista de productos
        * y la canasta en los campos de texto correspondientes
        * Si el elemento no es un número válido, no se agrega al estante de productos y se limpian los campos de texto.
        * @param txtIDprod El campo de texto donde se ingresa el ID del producto.
        * @param txtCanasta El campo de texto donde se muestra la información de la canasta de productos.
        * @param txtProductos El campo de texto donde se muestra la información de los productos.
        * @param invProductos El inventario de productos.
        * @param canastaProductos La canasta de productos que se está creando.
        */
        int itemI; // el ítem como un número entero
        String item = txtIDprod.getText();// el ítem como una cadena de caracteres
        boolean contieneSoloNumeros = item.matches("[0-9]+"); // indica si la cadena contiene sólo números
         
        if(contieneSoloNumeros){
                itemI = Integer.parseInt(item); // convierte la cadena en un número entero
            canastaProductos.creandoCarritoCompra(itemI, invProductos); // agrega el ítem a la canasta

            // Actualiza la información de los productos y la canasta en los campos de texto correspondientes
            txtProductos.setText( invProductos.getRegistroProductos().toString());
            txtCanasta.setText(canastaProductos.getRegistroProductos().toString());
        
            txtIDprod.setText(""); // limpia el campo de texto del ítem
        }else{
            itemI = 0; //  asigna el valor 0 al ítem como número entero

            canastaProductos.creandoCarritoCompra(itemI, invProductos); // no se agrega el ítem a la canasta
            
             // Actualiza la información de los productos y la del carrito en los campos de texto correspondientes
            // no aparecerá nada debido a que no existirá un producto con identificador 0 u otro dato invalido.
            txtProductos.setText( invProductos.getRegistroProductos().toString());
            txtCanasta.setText(canastaProductos.getRegistroProductos().toString());
        
            txtIDprod.setText("");         // limpia el campo de texto del ítem   
        }
        
    }//GEN-LAST:event_btnRegresarEstanteActionPerformed

    private void btnGenerarCanastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarCanastaActionPerformed
            /**
            Este método toma el valor ingresado en el campo de texto "txtDniCanasta" y lo utiliza para crear un objeto File con el mismo nombre
            Luego verifica si el valor ingresado en el campo de texto contiene solo números y tiene una longitud de 8 caractere
            Si es así, verifica si el archivo con ese nombre ya existe Si existe, se muestra un mensaje en "jLabel3" informando que el cliente ya tiene un pedido listo,
            y se resetean todos los campos y botones necesarios para comenzar una nueva compra
            Si el archivo no existe, se llama al método "escribirInventarioEnArchivo" de la clase ManejoFileInventario para escribir la lista de productos de la canasta en un archivo con el mismo nombre que el ingresado en el campo de texto
            También se llama a este método para escribir la lista de productos del inventario en su archivo correspondiente
            Luego se resetean todos los campos y botones necesarios para comenzar una nueva compra
            Si el valor ingresado en el campo de texto no contiene solo números con una longitud de 8 caracteres, se muestra un mensaje en "jLabel4" indicando que se debe ingresar un DNI válido.
            */

        String archt = txtDniCanasta.getText();  /*Se obtiene el valor ingresado por el usuario en un campo de texto llamado
        "txtDniCanasta" y se almacena en una variable llamada "archt".*/
        boolean contieneSoloNumeros = archt.matches("^[0-9]{8}$"); /*Se verifica si la cadena almacenada en "archt" contiene solo números
        y si tiene una longitud de 8 caracteres. El resultado de esta verificación se almacena en la variable booleana "contieneSoloNumeros".*/
        
        File archivo = new File(archt); /*Se crea un objeto File con el nombre de archivo igual a la cadena almacenada en "archt". 
                            Este objeto representa un archivo en el sistema de archivos.*/
   
        if(contieneSoloNumeros){ //Se verifica si la variable booleana "contieneSoloNumeros" es verdadera.
        
        
            if(archivo.exists()){ /*Si la verificación anterior es verdadera, se verifica si el archivo con el 
                nombre de archivo especificado existe en el sistema de archivos.*/
                
                
                  // Si el archivo existe, muestra un mensaje y realiza algunas acciones en la interfaz gráfica
                jLabel3.setText("EL CLIENTE YA TIENE UN PEDIDO LISTO.");
            /*
                Se establecen varios componentes de la interfaz de usuario en sus valores iniciales. 
                Se limpian los campos de texto "txtIDprod", "txtDniCanasta", "txtProductos" y "txtCanasta". 
                Se habilita el botón "btnProductosDisponibles". Se limpia el componente "jLabel4". 
                Se deshabilitan los campos de texto "txtDniCanasta", "txtIDprod", "txtProductos", "txtCanasta"
                 y los botones "btnAñadirCarrito", "btnRegresarEstante" y "btnGenerarCanasta". 
                
                */    
                txtIDprod.setText("");
                txtDniCanasta.setText("");
                txtProductos.setText("");
                txtCanasta.setText("");
                btnProductosDisponibles.setEnabled(true);
                jLabel4.setText("");
                txtDniCanasta.setEditable(false);
                btnAñadirCarrito.setEnabled(false);
                btnRegresarEstante.setEnabled(false);
                btnGenerarCanasta.setEnabled(false);
                txtIDprod.setEditable(false);
                txtProductos.setEditable(false);
                txtCanasta.setEditable(false);
                canastaProductos.getRegistroProductos().clear();  //Se borran los productos registrados en la canasta.

            }else
                { 
         /*
            Si el archivo con el nombre de archivo especificado no existe, 
            se llama a dos métodos de la clase "ManejoFileInventario" para 
            escribir los inventarios "canastaProductos" y "invProductos" en archivos. 
            Luego se establecen varios componentes de la interfaz de usuario
            en sus valores iniciales y se limpia el registro de productos de la canasta      
           */
          
                ManejoFileInventario.escribirInventarioEnArchivo(archt, canastaProductos);
                ManejoFileInventario.escribirInventarioEnArchivo(invProductos.getTipoInventario(), invProductos);

                txtIDprod.setText("");
                txtDniCanasta.setText("");
                txtProductos.setText("");
                txtCanasta.setText("");
                btnProductosDisponibles.setEnabled(true);
                jLabel4.setText("");
                jLabel3.setText("");
                txtDniCanasta.setEditable(false);
                btnAñadirCarrito.setEnabled(false);
                btnRegresarEstante.setEnabled(false);
                btnGenerarCanasta.setEnabled(false);
                txtIDprod.setEditable(false);
                txtProductos.setEditable(false);
                txtCanasta.setEditable(false);
                // Limpia el registro de productos de la canasta
                canastaProductos.getRegistroProductos().clear();
            }
            
            // Limpia el campo de texto txtDniCanasta
            txtDniCanasta.setText("");
           
        }else{
            // Si la cadena de texto ingresada no contiene solo números, muestra un mensaje de error en la interfaz gráfica
            jLabel4.setText("Ingrese un DNI valido");
        }

    }//GEN-LAST:event_btnGenerarCanastaActionPerformed

    private void txtDniCanastaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDniCanastaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDniCanastaActionPerformed

    private void btnCerrarVentanaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarVentanaActionPerformed
        // TODO add your handling code here:
          this.setVisible(false);
    }//GEN-LAST:event_btnCerrarVentanaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Canasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Canasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Canasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Canasta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Canasta().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAñadirCarrito;
    private javax.swing.JButton btnCerrarVentana;
    private javax.swing.JButton btnGenerarCanasta;
    private javax.swing.JButton btnProductosDisponibles;
    private javax.swing.JButton btnRegresarEstante;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTituloCarrito;
    private javax.swing.JLabel lblTituloEstante;
    private javax.swing.JTextArea txtCanasta;
    private javax.swing.JTextField txtDniCanasta;
    private javax.swing.JTextField txtIDprod;
    private javax.swing.JTextArea txtProductos;
    // End of variables declaration//GEN-END:variables
}
